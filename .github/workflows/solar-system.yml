name: Solar System Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'

env:
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
    
jobs:
    unit-testing:
        name: Unit Testing
        #permissions: read-all
        strategy:
          matrix:
            nodejs_version: [18,20]
            os: [ubuntu-latest]
            exclude:
              - nodejs_version: 18
                os: macos-latest
        runs-on: ${{ matrix.os }}
        container:
          image: node:${{ matrix.nodejs_version }}
        services:
          mongo-db:
            image: min80/mongo-db:non-prod
            options:
              --name mongo
        env:
          MONGO_URI: 'mongodb://mongo:27017/superData'
          MONGO_USERNAME: non-prod-user
          MONGO_PASSWORD: non-prod-password
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        #- name: Setup NodeJS Version - ${{ matrix.nodejs_version }}
        #  uses: actions/setup-node@v3
        #  with:
        #    node-version: ${{ matrix.nodejs_version }}
    
        - name: Cache NPM dependendies
          uses: actions/cache@v3
          with:
            path: node_modules
            key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

        - name: Install Dependencies
          run: npm install
    
        - name: Unit Testing
          id: nodejs-unit-testing-step
          run: npm test
          
        - name: Archive Test Result
          if: always() 
          uses: actions/upload-artifact@v3
          with:
            name: Mocha-Test-Result
            path: test-results.xml

    code-coverage:
        name: Code Coverage
        container:
          image: node:18
        services:
          mongo-db:
            image: min80/mongo-db:non-prod
            options:
              --name mongo
        env:
          MONGO_URI: 'mongodb://mongo:27017/superData'
          MONGO_USERNAME: non-prod-user
          MONGO_PASSWORD: non-prod-password
        runs-on: ubuntu-latest
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        #- name: Setup NodeJS Version - 18
        #  uses: actions/setup-node@v3
        #  with:
        #    node-version: 18

        - name: Cache NPM dependendies
          uses: actions/cache@v3
          with:
              path: node_modules
              key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
    
        - name: Install Dependencies
          run: npm install
    
        - name: Check Code Coverage
          continue-on-error: true
          run: npm run coverage
          
        - name: Archive Test Result
          uses: actions/upload-artifact@v3
          with:
            name: Code-Coverage-Result
            path: coverage
            retention-days: 5
    
    docker:
      name: Containerization
      needs: [unit-testing, 'code-coverage']
      runs-on: ubuntu-latest
      steps:
        - name: Checkout
          uses: actions/checkout@v4

        - name: Dockerhub Login
          uses: docker/login-action@v3
          with:
            username: ${{ vars.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_PASSWORD }}

        - name: GHCR Login
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.repository_owner }}
            password: ${{ secrets.GITHUB_TOKEN }}

        - name: Docker Build For Testing
          uses: docker/build-push-action@v5
          with:
            context: .
            push: false
            tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }} # github.sha: returns hash-value of commit

        - name: Docker Image Test
          run: |
            docker images
            docker run --name solar-system-app -d \
              -p 3000:3000 \
              -e MONGO_URI=$MONGO_USERNAME \
              -e MONGO_PASSWORD=$MONGO_PASSWORD \
              ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
            
            #export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAdress}}{{end}}' solar-system-app)
            #echo $IP

            echo Testing Image URL using wget
            wget -q -O - 127.0.0.1:3000/live | grep live

        #- name: Container Registry Push
        #  uses: docker/build-push-action@v5
        #  with:
        #    context: .
        #    push: true
        #    tags: |
        #      ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
        #      gchr.io/${{ github.repository_owner }}/solar-system:${{ github.sha }}
        
    dev-deploy:
      name: Deploy Docker container
      needs: docker
      runs-on: ubuntu-latest
      steps:
        #checkout repository
        - name: Checkout Repository For Deploying
          uses: actions/checkout@v4

        #- name: start minikube
        #  id: minikube
        #  uses: medyagh/setup-minikube@master

        #install dependencies
        - name: Install kubectl CLI
          uses: azure/setup-kubectl@v3 # use action from marketplace to install kubectl (otherwise do it step by step)
          with:
            version: 'v1.26.0' # default is latest stable

        - name: start minikube
          id: minikube
          uses: medyagh/setup-minikube@latest

          # now you can run kubectl to see the pods in the cluster
        - name: Run test kubectl output
          run: |
            kubectl get pods -A
            kubectl version --short
            echo ---------------------------------------------------------
            kubectl get nodes
 
        #- name: Build image 
        #  run: | 
        #    export SHELL=/bin/bash
        #    eval $(minikube -p minikube docker-env)
        #    make build-image
        #    echo -n "verifying images:"
        #    docker images

        

        #- name: Set Kubeconfig
        #  uses: azure/k8s-set-context@v3
        #  with:
        #    method: kubeconfig
        #    kubeconfig: ${{ secrets.KUBECONFIG }}

        #- name: Fetch Kubernetes Cluster Details
        #  run: |
        #    kubectl version --short
        # echo ---------------------------------------------------------
        #  kubectl get nodes
        - name: Start Nginx ingress controller
          run: 
            kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/cloud/deploy.yaml


        - name: Save Nginx Ingress Controller IP as a GITHUB Environment Variable
          run:
            echo "INGRESS_IP=$(kubectl -n ingress-nginx get services ingress-nginx-controller -o jsonpath="{.status.loadBalancer.ingress[0].ip}")" >> $GITHUB_ENV

        - name: Replace Token in Manifest files
          uses: cschleiden/replace-tokens@v1
          with:
            tokenPrefix: '_{_'
            tokenSuffix: '_}_'
            files: '["kubernetes/development/*.yaml"]'
          env:
            NAMESPACE: ${{ vars.NAMESPACE }}
            REPLICAS: ${{ vars.REPLICAS }}
            IMAGE: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
            INGRESS_IP: ${{ env.INGRESS_IP }}
            
        #- name: Deploy to minikube
        #  run: 
        #    kubectl apply -f kubernetes/development.yaml
              
        #- name: Test service URLs
        #  run: | 
        #    minikube service list
        #    minikube service discover --url
        #    echo -n "------------------opening the service------------------"
        #    curl $(minikube service discover --url)/version
        #do your job


